name: build provisioningVM
on: push

jobs:
  build-VMs:
    name: Setup and Configure VM
    runs-on: iede
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: SSH CONFIG FILE
        run: |
          touch /home/adminuser/.ssh/config
          echo "Host *" > /home/adminuser/.ssh/config
          echo "  StrictHostKeyChecking no" >> /home/adminuser/.ssh/config

      - name: Create directory for repo
        run: sudo mkdir -p /opt/pertclinic
      
      - name: Set ownership of directory
        run: sudo chown adminuser:adminuser /opt/pertclinic
      
      - name: Clone repo
        run: sudo -u adminuser git clone -b pet-iede https://github.com/sennahoj123/pertclinic.git /opt/pertclinic

      - name: Terraform Init
        working-directory: terraform-azure
        run: terraform init

      - name: terrafrom import
        run: |
          terraform import azurerm_virtual_network.az_vn /subscriptions/41e50375-b926-4bc4-9045-348f359cf721/resourceGroups/iede_adu-rg/providers/Microsoft.Network/virtualNetworks/iede_adu-rg-vnet
          terraform import azurerm_network_security_group.az_sg /subscriptions/41e50375-b926-4bc4-9045-348f359cf721/resourceGroups/iede_adu-rg/providers/Microsoft.Network/networkSecurityGroups/iede_adu-rg-security

      - name: Terraform Apply
        working-directory: terraform-azure
        run: terraform apply -auto-approve

      - name: Output Public IP Addresses
        working-directory: terraform-azure
        run: sleep 10 && terraform output -json > /opt/pertclinic/terraform-azure/ip_addresses.json

      - name: Check IP Addresses File
        run: cat /opt/pertclinic/terraform-azure/ip_addresses.json

      - name: Update Hosts File
        run: python3 /opt/pertclinic/terraform-azure/ip_input.py

      - name: Check Updated Hosts File
        run: cat /opt/pertclinic/ansible/hosts
        
      - name: Check connection
        run: ansible all -i /opt/pertclinic/ansible/hosts -u adminuser -m command -a "uptime"

  testing-VM:
    name: Bootstrap testing
    runs-on: iede
    needs: build-VMs
    steps:
      - name: Testing Playbook
        run: ansible-playbook -i /opt/pertclinic/ansible/hosts /opt/pertclinic/ansible/main-testing.yml
        
      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results
          path: ~/testresultsiede.jtl
        continue-on-error: true

  acceptance-VM:
    name: Bootstrap acceptance
    runs-on: iede
    needs: testing-VM
    steps:
      - name: Acceptance Playbook
        run: ansible-playbook -i /opt/pertclinic/ansible/hosts /opt/pertclinic/ansible/main-acceptance.yml
  
  production-VM:
    name: Bootstrap production
    runs-on: iede
    needs: acceptance-VM
    steps:
      - name: Production Playbook
        run: ansible-playbook -i /opt/pertclinic/ansible/hosts /opt/pertclinic/ansible/main-production.yml

  Destroy:
    name: Terraform Destroy & rm git repo
    runs-on: iede
    needs: production-VM
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Initialize Terraform
        working-directory: terraform-azure
        run: terraform init
  
      #- name: Destroy VM1 Resources
       # working-directory: terraform-azure
        #run: |
         # terraform destroy \
          #  -target="azurerm_linux_virtual_machine.az_vm[\"vm1\"]" \
           # -target="azurerm_network_interface.az_ni[\"vm1\"]" \
            #-target="azurerm_public_ip.az_ip[\"vm1\"]" \
            #-auto-approve
  
      #- name: Destroy VM2 Resources
       # working-directory: terraform-azure
        #run: |
         # terraform destroy \
          #  -target="azurerm_linux_virtual_machine.az_vm[\"vm2\"]" \
           # -target="azurerm_network_interface.az_ni[\"vm2\"]" \
            #-target="azurerm_public_ip.az_ip[\"vm2\"]" \
            #-auto-approve
            
      #- name: rm git repo
       # run: sudo rm -r /opt/pertclinic

